<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
	<!--shrio的核心,管理subject对象的(有点类似于之前学过的工厂)  -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		
		<!--<property name="cacheManager" ref="cacheManager"/> -->
		<!--自定义的Reaml 必需实现org.apache.shiro.realm.Realm这个接口
		
			用来配置认证和授权的数据源，代替shiro.ini -->
		<property name="realm" ref="myRealm" />
	
		<!-- 加入rememberMe管理 -->
		 <property name="rememberMeManager" ref="rememberMeManager" />
	</bean>
	
	<!-- 实例化myRealm -->
	 <bean id="myRealm" class="org.pzy.tmall.realm.MyRealm">
		 <property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 加密的算法 -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!-- 加密次数 -->
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property> 
	</bean>
	<!-- 设置cookie的有效时间 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" /><!-- 30天 -->
	</bean>
	
	<!-- 配置一个RememberMe的管理器，来管理cookie -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
	
	 <!-- 配置缓存 -->
<!--	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		&lt;!&ndash; cache配置文件 &ndash;&gt;
		<property name="cacheManagerConfigFile" value="classpath:spring/ehcache.xml" />
	</bean>

 
	<!-- 管理shiro bean的生命周期 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 使用shrio的注解，必需配置一下两个bean 才能使用-->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
		
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!--&lt;!&ndash; 最关键的部分 shiro过滤器 &ndash;&gt;
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		&lt;!&ndash; 设置认证（登录）的地址 &ndash;&gt;
		<property name="loginUrl" value="/user/login" />
		&lt;!&ndash; 设置认证 成功的地址 &ndash;&gt;
	 &lt;!&ndash; 	<property name="successUrl" value="/user/index" />  &ndash;&gt;
		&lt;!&ndash; 权限不足的展示（role）跳转的地址 &ndash;&gt;
		<property name="unauthorizedUrl" value="/s/unauthorized" />
		&lt;!&ndash; The 'filters' property is not necessary since any declared javax.servlet.Filter
			bean defined will be automatically acquired and available via its beanName 
			in chain definitions, but you can perform overrides or parent/child consolidated 
			configuration here if you like: &ndash;&gt;
		&lt;!&ndash; <property name="filters"> <util:map> <entry key="aName" value-ref="someFilterPojo"/>
			</util:map> </property> &ndash;&gt;
		<property name="filterChainDefinitions">
			<value>
				 /user/nowLogin = anon
				/user/login = anon
				/user/index= anon
				/user/logout = logout
				/css/** = anon
				/img/** = anon
				/js/** = anon
				/lib/** = anon
				/skin/** = anon
				/**=authc
			</value>
		</property>
	</bean>-->

</beans>
